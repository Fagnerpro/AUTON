Resumo dos Erros
removeChild is not a child of this node

Erro: NotFoundError: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.

Origem: O React tentou remover um nÃ³ DOM que jÃ¡ nÃ£o estÃ¡ mais presente no pai informado.

insertBefore is not a child of this node

Erro: NotFoundError: Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.

Origem: O React tentou inserir um nÃ³ antes de outro que nÃ£o pertence mais ao DOM.

ğŸ“Œ Causas Comuns
RenderizaÃ§Ãµes assÃ­ncronas concorrentes: especialmente com React Query, Suspense, useEffect, ou setTimeout.

ManipulaÃ§Ã£o imperativa direta no DOM fora do controle do React (ex: element.remove() ou appendChild()).

Condicionais de renderizaÃ§Ã£o incorretas ou mudanÃ§as abruptas no key de componentes em listas.

Componente desmontado prematuramente, mas com efeitos ainda ativos (ex: setTimeout, fetch, useEffect).

Erro em Ã¡rvores aninhadas no Switch do wouter, ou React Router, removendo ou reinserindo componentes do DOM antes do tempo.

âœ… RecomendaÃ§Ãµes TÃ©cnicas
Garanta consistÃªncia de chaves (key) em listas:

tsx
Copiar
Editar
{data.map((item) => (
  <Component key={item.id ?? item.uuid} />
))}
Evite renderizaÃ§Ã£o condicional errÃ¡tica sem fallback:

tsx
Copiar
Editar
{isMounted && <Component />} // ok
{data && <Component />} // cuidado: se data for falsy por um ciclo, pode quebrar
Use useEffect com cancelamento de efeito:

tsx
Copiar
Editar
useEffect(() => {
  let mounted = true
  fetchData().then((res) => {
    if (mounted) setState(res)
  })
  return () => {
    mounted = false
  }
}, [])
Evite manipular DOM diretamente (sem ref) dentro de componentes React.

Valide se hÃ¡ renderizaÃ§Ã£o paralela e sobreposiÃ§Ã£o de efeitos

Quando estiver usando React 18 com StrictMode, o comportamento de montagem e desmontagem Ã© duplicado em modo dev.

Se usar animaÃ§Ãµes, limpe efeitos:

tsx
Copiar
Editar
const timeoutId = setTimeout(() => ..., 500)
return () => clearTimeout(timeoutId)
ğŸ§° SugestÃ£o de Auditoria
Se quiser investigar de forma mais estruturada:

Ative React DevTools Profiler para rastrear renderizaÃ§Ãµes redundantes.

Adicione console.log nos ciclos de vida (useEffect, componentDidMount) para entender a sequÃªncia de montagem/desmontagem.

Verifique se hÃ¡ setState() sendo chamado apÃ³s desmontagem.

ğŸ“„ Exemplo com ErrorBoundary
VocÃª jÃ¡ estÃ¡ usando um ErrorBoundary, o que Ã© excelente. Certifique-se de que ele estÃ¡ envolvendo apenas componentes que nÃ£o manipulam diretamente o DOM fora do React.